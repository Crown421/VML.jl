
using CpuId
using Libdl


function defMKLpath()
    if Sys.isunix()
        return "/opt/intel/mkl/lib"
    # elseif Sys.iswindows()
    #     return
    else
        return ""
    end
end
        


### First Option, check for user preference
if haskey(ENV, "MKL_SL") 
    basepath = ENV["MKL_SL"]
    if !any([occursin("libmkl_rt",x) for x in readdir(basepath)])
        error(""" ENV["MKL_SL"] is set, but does not point to folder containing MKL files """)
    end
    println("""Found MKL via ENV["MKL_SL"]
    basepath set to $basepath""")
    
### Next, check if MKL.jl is already installed. 
# Don't want to add to deps, so bit hacky
else
    foundMKLjl = [isdir(joinpath(testdir, "packages/MKL")) for testdir in DEPOT_PATH]

    if any(foundMKLjl)
        pkgPath = joinpath(DEPOT_PATH[findfirst(foundMKLjl)], "packages/MKL/")

        shortID = readdir(pkgPath)[1]

        basepath = joinpath(pkgPath, shortID, "deps/usr/lib")
        
        if isdir(basepath)
            println("Found MKL.jl package
            basepath set to $basepath")
        else
            error("Found MKL package folder, but MKL libraries at deps/usr/lib are missing
            Please rebuild MKL")
        end

    elseif isdir(defMKLpath())
        basepath = defMKLpath()

    else
        error("Could not find VML shared libraries
            Check github.com/.... for details on obtaining them")

    end
end


if cpufeature(:AVX2)
    lib = joinpath(basepath, "libmkl_vml_avx2")
    println("AVX2 support detected, vml_avx2 selected")
else
    lib = joinpath(basepath, "libmkl_vml_avx")
    println("AVX2 support missing, vml_avx selected")
end

rtlib = joinpath(basepath, "libmkl_rt")
corelib = joinpath(basepath, "libmkl_core")


depsjl_path = joinpath(@__DIR__, "deps.jl")
open(depsjl_path, "w") do depsjl_file
    println(depsjl_file, strip("""
        ## This file was autogenerated by build.jl.
        ## Do not edit.
        import Libdl

        const lib = "$lib"
        const rtlib = "$rtlib"
        const corelib = "$corelib"
        """))
end